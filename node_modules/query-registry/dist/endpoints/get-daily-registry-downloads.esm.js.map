{"version":3,"file":"get-daily-registry-downloads.esm.js","sources":["../../src/endpoints/get-daily-registry-downloads.ts"],"sourcesContent":["import { DownloadPeriod } from '../types/download-period';\nimport { DailyRegistryDownloads } from '../types/downloads';\nimport { fetchDownloadsFromRegistry } from '../utils/fetch-downloads-from-registry';\nimport { normalizeRawDownloadPeriod } from '../utils/normalize-download-period';\n\n/**\n * `getDailyRegistryDownloads` returns the number of downloads for all registry packages\n * for each day in a given time period.\n *\n * @param period - time period in which downloads happened (default: `last-week`)\n * @param registryDownloadsAPI - URL of the registry's downloads API (default: npm registry)\n * @param cached - accept cached responses (default: `true`)\n *\n * @example\n * Get the day by day weekly downloads for the npm registry:\n *\n * ```typescript\n * import { getDailyRegistryDownloads } from 'query-registry';\n *\n * (async () => {\n *     const downloads = await getDailyRegistryDownloads();\n *\n *     // Output: 'number'\n *     console.log(typeof downloads.downloads[0].downloads);\n * })();\n * ```\n *\n * @example\n * Get the day by day monthly downloads for the npm registry:\n *\n * ```typescript\n * import { getDailyRegistryDownloads } from 'query-registry';\n *\n * (async () => {\n *     const downloads = await getDailyRegistryDownloads({ period: 'last-month' });\n *\n *     // Output: 'number'\n *     console.log(typeof downloads.downloads[0].downloads);\n * })();\n * ```\n *\n * @see {@link DailyRegistryDownloads}\n * @see {@link DownloadPeriod}\n * @see {@link npmRegistryDownloadsAPI}\n * @see {@link https://github.com/npm/registry/blob/master/docs/download-counts.md#ranges}\n */\nexport async function getDailyRegistryDownloads({\n    period: rawDownloadPeriod,\n    registryDownloadsAPI,\n    cached,\n}: {\n    period?: DownloadPeriod;\n    registryDownloadsAPI?: string;\n    cached?: boolean;\n} = {}): Promise<DailyRegistryDownloads> {\n    const period = normalizeRawDownloadPeriod({ rawDownloadPeriod });\n    const endpoint = `/downloads/range/${period}`;\n    return fetchDownloadsFromRegistry({\n        endpoint,\n        registryDownloadsAPI,\n        cached,\n    });\n}\n"],"names":["getDailyRegistryDownloads","period","rawDownloadPeriod","registryDownloadsAPI","cached","normalizeRawDownloadPeriod","endpoint","fetchDownloadsFromRegistry"],"mappings":";;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCG;;AACI,eAAeA,yBAAf,CAAyC;AAC5CC,EAAAA,MAAM,EAAEC,iBADoC;EAE5CC,oBAF4C;AAG5CC,EAAAA,MAAAA;AAH4C,CAAA,GAQ5C,EARG,EAQD;EACF,MAAMH,MAAM,GAAGI,0BAA0B,CAAC;AAAEH,IAAAA,iBAAAA;AAAF,GAAD,CAAzC,CAAA;AACA,EAAA,MAAMI,QAAQ,GAAuB,CAAAL,iBAAAA,EAAAA,OAArC,CAAA,CAAA;AACA,EAAA,OAAOM,0BAA0B,CAAC;IAC9BD,QAD8B;IAE9BH,oBAF8B;AAG9BC,IAAAA,MAAAA;AAH8B,GAAD,CAAjC,CAAA;AAKH;;;;"}