{"version":3,"file":"get-registry-metadata.esm.js","sources":["../../src/endpoints/get-registry-metadata.ts"],"sourcesContent":["import { RegistryMetadata } from '../types/registry-metadata';\nimport { fetchFromRegistry } from '../utils/fetch-from-registry';\n\n/**\n * `getRegistryMetadata` returns the metadata describing the registry itself.\n *\n * @param registry - URL of the registry (default: npm registry)\n * @param cached - accept cached responses (default: `true`)\n *\n * @example\n * Get the metadata for the npm registry:\n *\n * ```typescript\n * import { getRegistryMetadata } from 'query-registry';\n *\n * (async () => {\n *     const metadata = await getRegistryMetadata();\n *\n *     // Output: 'registry'\n *     console.log(metadata.db_name);\n * })();\n * ```\n *\n * @example\n * Get the metadata for a custom registry:\n *\n * ```typescript\n * import { getRegistryMetadata } from 'query-registry';\n *\n * (async () => {\n *     const metadata = await getRegistryMetadata({ registry: 'https://example.com' });\n * })();\n * ```\n *\n * @see {@link RegistryMetadata}\n * @see {@link npmRegistry}\n */\nexport async function getRegistryMetadata({\n    registry,\n    cached,\n}: {\n    registry?: string;\n    cached?: boolean;\n} = {}): Promise<RegistryMetadata> {\n    const endpoint = '/';\n    return fetchFromRegistry({ registry, mirrors: [], endpoint, cached });\n}\n"],"names":["getRegistryMetadata","registry","cached","endpoint","fetchFromRegistry","mirrors"],"mappings":";;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;;AACI,eAAeA,mBAAf,CAAmC;EACtCC,QADsC;AAEtCC,EAAAA,MAAAA;AAFsC,CAAA,GAMtC,EANG,EAMD;EACF,MAAMC,QAAQ,GAAG,GAAjB,CAAA;AACA,EAAA,OAAOC,iBAAiB,CAAC;IAAEH,QAAF;AAAYI,IAAAA,OAAO,EAAE,EAArB;IAAyBF,QAAzB;AAAmCD,IAAAA,MAAAA;AAAnC,GAAD,CAAxB,CAAA;AACH;;;;"}