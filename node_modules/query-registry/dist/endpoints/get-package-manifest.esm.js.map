{"version":3,"file":"get-package-manifest.esm.js","sources":["../../src/endpoints/get-package-manifest.ts"],"sourcesContent":["import { PackageManifest } from '../types/package-manifest';\nimport { extractRawPackageManifest } from '../utils/extract-package-manifest';\nimport { normalizeRawPackageManifest } from '../utils/normalize-raw-package-manifest';\nimport { getRawPackument } from './get-raw-packument';\n\n/**\n * `getPackageManifest` returns the manifest describing\n * a specific version of a package.\n *\n * @param name - package name\n * @param version - package version (default: `latest`)\n * @param registry - URL of the registry (default: npm registry)\n * @param mirrors - URLs of the registry mirrors (default: npm registry mirrors)\n * @param cached - accept cached responses (default: `true`)\n *\n * @example\n * Get the latest manifest for package `query-registry` from the npm registry:\n *\n * ```typescript\n * import { getPackageManifest } from 'query-registry';\n *\n * (async () => {\n *     const manifest = await getPackageManifest({ name: 'query-registry' });\n *\n *     // Output: 'query-registry'\n *     console.log(manifest.name);\n * })();\n * ```\n *\n * @example\n * Get the manifest for package `query-registry@1.0.0` from the npm registry:\n *\n * ```typescript\n * import { getPackageManifest } from 'query-registry';\n *\n * (async () => {\n *     const manifest = await getPackageManifest({ name: 'query-registry', version: '1.0.0' });\n *\n *     // Output: 'query-registry'\n *     console.log(manifest.name);\n *\n *     // Output: '1.0.0'\n *     console.log(manifest.version);\n * })();\n * ```\n *\n * @see {@link PackageManifest}\n * @see {@link RawPackageManifest}\n * @see {@link npmRegistry}\n * @see {@link npmRegistryMirrors}\n */\nexport async function getPackageManifest({\n    name,\n    version,\n    registry,\n    mirrors,\n    cached,\n}: {\n    name: string;\n    version?: string;\n    registry?: string;\n    mirrors?: string[];\n    cached?: boolean;\n}): Promise<PackageManifest> {\n    const rawPackument = await getRawPackument({\n        name,\n        registry,\n        mirrors,\n        cached,\n    });\n\n    const rawPackageManifest = extractRawPackageManifest({\n        rawPackument,\n        version,\n    });\n\n    const packageManifest = await normalizeRawPackageManifest({\n        rawPackageManifest,\n        rawPackument,\n        registry,\n        mirrors,\n        cached,\n    });\n\n    return packageManifest;\n}\n"],"names":["getPackageManifest","name","version","registry","mirrors","cached","rawPackument","getRawPackument","rawPackageManifest","extractRawPackageManifest","packageManifest","normalizeRawPackageManifest"],"mappings":";;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CG;;AACI,eAAeA,kBAAf,CAAkC;EACrCC,IADqC;EAErCC,OAFqC;EAGrCC,QAHqC;EAIrCC,OAJqC;AAKrCC,EAAAA,MAAAA;AALqC,CAAlC,EAYN;AACG,EAAA,MAAMC,YAAY,GAAG,MAAMC,eAAe,CAAC;IACvCN,IADuC;IAEvCE,QAFuC;IAGvCC,OAHuC;AAIvCC,IAAAA,MAAAA;AAJuC,GAAD,CAA1C,CAAA;EAOA,MAAMG,kBAAkB,GAAGC,yBAAyB,CAAC;IACjDH,YADiD;AAEjDJ,IAAAA,OAAAA;AAFiD,GAAD,CAApD,CAAA;AAKA,EAAA,MAAMQ,eAAe,GAAG,MAAMC,2BAA2B,CAAC;IACtDH,kBADsD;IAEtDF,YAFsD;IAGtDH,QAHsD;IAItDC,OAJsD;AAKtDC,IAAAA,MAAAA;AALsD,GAAD,CAAzD,CAAA;AAQA,EAAA,OAAOK,eAAP,CAAA;AACH;;;;"}