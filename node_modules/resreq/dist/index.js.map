{"version":3,"sources":["../src/constants/index.ts","../src/helpers/compose.ts","../src/helpers/isJsonBody.ts","../src/Req.ts","../src/middleware/requestHandler.ts","../src/Res.ts","../src/middleware/responseHandler.ts","../src/middleware/timeoutHandler.ts","../src/middleware/responseTypeHandler.ts","../src/helpers/mergeHeaders.ts","../src/index.ts"],"sourcesContent":["export const ON_GLOBAL_DOWNLOAD_PROGRESS = Symbol('ON_GLOBAL_DOWNLOAD_PROGRESS')\nexport const ABORT_CONTROLLER = Symbol('ABORT_CONTROLLER')\n","/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * References：https://github.com/reduxjs/redux/blob/master/src/compose.ts\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nconst compose = <T extends Function>(...funcs: Array<(a: T) => T>) => {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T>(arg: T) => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce(\n    (a, b) =>\n      (...args) =>\n        a(b(...args))\n  )\n}\n\nexport default compose\n","const isJsonBody = (body: Body | BodyInit | Record<string, any>) => {\n  /**\n   * Judging the type supported by BodyInit\n   * Types not supported by node, first determine if they exist\n   */\n\n  return (\n    body &&\n    typeof body === 'object' &&\n    !(\n      (globalThis.FormData && body instanceof FormData) ||\n      (globalThis.Blob && body instanceof Blob) ||\n      (globalThis.File && body instanceof File) ||\n      (globalThis.ArrayBuffer && body instanceof ArrayBuffer) ||\n      (globalThis.ArrayBuffer && ArrayBuffer.isView(body)) ||\n      (globalThis.URLSearchParams && body instanceof URLSearchParams) ||\n      (globalThis.ReadableStream && body instanceof ReadableStream)\n    )\n  )\n}\n\nexport default isJsonBody\n","import { ReqInit, ProgressCallback, ResponseType } from './types'\nimport { ON_GLOBAL_DOWNLOAD_PROGRESS, ABORT_CONTROLLER } from './constants'\nimport isJsonBody from './helpers/isJsonBody'\nimport { version } from '../package.json'\n\nexport default class Req extends Request {\n  readonly meta?: Record<string, any>\n  readonly timeout: number\n  readonly responseType?: ResponseType\n  readonly throwHttpError: boolean;\n  readonly [ABORT_CONTROLLER]: AbortController\n  readonly onDownloadProgress?: ProgressCallback;\n  readonly [ON_GLOBAL_DOWNLOAD_PROGRESS]?: ProgressCallback\n\n  constructor(request: Req, init: ReqInit | Request) {\n    let body = (init.body ?? request.body) as BodyInit\n    const headers = new Headers(init.headers ?? request.headers)\n\n    /**\n     * Set User-Agent (required by some servers)\n     * User-Agent is specified; handle case where no UA header is desired\n     * Only set header if it hasn't been set in config\n     */\n    !headers.has('User-Agent') && headers.set('User-Agent', `resreq/${version}`)\n\n    /**\n     * If he init.body is JSON, reset Header and Body\n     * Reference: https://github.com/axios/axios/blob/master/lib/defaults/index.js#L71\n     */\n    if (body && isJsonBody(body)) {\n      headers.set('Content-Type', 'application/json')\n      try {\n        body = JSON.stringify(body)\n      } catch (error) {\n        throw new TypeError(`Request body must be a valid JSON object.`)\n      }\n    }\n\n    /**\n     * If the body is a FormData or URLSearchParams\n     * have it automatically request the Content-Type\n     *\n     * Reference:\n     * https://github.com/sindresorhus/ky/blob/de66c1613ebc4c01d16ae970c20867513347b5c6/source/core/Ky.ts#L168\n     * https://github.com/axios/axios/blob/e52e4dbb575fc8bd9cb7d2f5306f30ee82b40b4d/lib/defaults/index.js#L67\n     * https://github.com/axios/axios/blob/e52e4dbb575fc8bd9cb7d2f5306f30ee82b40b4d/lib/adapters/xhr.js#L31\n     */\n    if ((globalThis.FormData && body instanceof FormData) || body instanceof URLSearchParams) {\n      headers.delete('Content-Type')\n    }\n\n    const abortController = new AbortController()\n\n    /**\n     * Signal is empty in node-fetch and whatwg-fetch\n     * so need to add abortController.signal\n     * Reference: https://github.com/github/fetch/pull/1003\n     */\n    const signal = init.signal || request.signal || abortController.signal\n\n    /**\n     * If the user input a new url, a new request object is created with the new url\n     */\n    super(new Request(init.url ?? request.url), {\n      method: init.method ?? request.method,\n      headers,\n      body: body ?? request.body,\n      mode: init.mode ?? request.mode,\n      /**\n       * In node-fetch polyfill, credentials will not work\n       * Reference: https://github.com/node-fetch/node-fetch/issues/49\n       */\n      credentials: init.credentials ?? request.credentials,\n      cache: init.cache ?? request.cache,\n      redirect: init.redirect ?? request.redirect,\n      referrer: init.referrer ?? request.referrer,\n      referrerPolicy: init.referrerPolicy ?? request.referrerPolicy,\n      integrity: init.integrity ?? request.integrity,\n      keepalive: init.keepalive ?? request.keepalive,\n      signal: abortController.signal\n    })\n    this.meta = (init as ReqInit).meta ?? request.meta\n    this.timeout = (init as ReqInit).timeout ?? request.timeout\n    this.responseType = (init as ReqInit).responseType ?? request.responseType\n    this.throwHttpError = (init as ReqInit).throwHttpError ?? request.throwHttpError\n    this.onDownloadProgress = (init as ReqInit).onDownloadProgress ?? request.onDownloadProgress\n    this[ON_GLOBAL_DOWNLOAD_PROGRESS] =\n      (init as ReqInit)[ON_GLOBAL_DOWNLOAD_PROGRESS] ?? request[ON_GLOBAL_DOWNLOAD_PROGRESS]\n    this[ABORT_CONTROLLER] = abortController\n    signal.addEventListener('abort', () => abortController.abort())\n  }\n}\n","import { Middleware, Options } from '../types'\nimport Req from '../Req'\n\ninterface OverrideReqInit extends Options {\n  url: string\n  body?: BodyInit\n}\n\n/**\n * The first middleware through which the request passes, initializing the Req\n */\nconst requestHandler: Middleware = (next) => async (_req) => {\n  /**\n   * Before the initial request, the req is just an options object，So need to override type\n   * JSON Body will be processed in the following new Req()\n   */\n  const req = _req as OverrideReqInit\n\n  const url = Object.entries(req.params || {})\n    .reduce(\n      (acc: URL, [key, value]) => {\n        acc.searchParams.append(key, value)\n        return acc\n      },\n      req.baseURL ? new URL(req.url, req.baseURL) : new URL(req.url)\n    )\n    .toString()\n\n  /**\n   * Create a Req with the specified url\n   */\n  return await next(new Req(req as Req, { url }))\n}\n\nexport default requestHandler\n","import { ResInit, ResponseType, ProgressCallback } from './types'\nimport { ON_GLOBAL_DOWNLOAD_PROGRESS, ABORT_CONTROLLER } from './constants'\nimport isJsonBody from './helpers/isJsonBody'\n\nexport default class Res extends Response {\n  readonly meta?: Record<string, any>\n  readonly timeout: number\n  readonly responseType?: ResponseType\n  readonly throwHttpError: boolean\n  readonly abortController: AbortController\n  readonly onDownloadProgress?: ProgressCallback;\n  readonly [ON_GLOBAL_DOWNLOAD_PROGRESS]?: ProgressCallback\n\n  constructor(response: Res, init: ResInit | Response) {\n    let body = (init.body ?? response.body) as BodyInit\n    const headers = new Headers(init.headers ?? response.headers)\n    /**\n     * Automatically process the mock json entered by the user.\n     */\n    if (body && isJsonBody(body)) {\n      try {\n        body = JSON.stringify(body)\n      } catch (error) {\n        throw new TypeError(`Response body must be a valid JSON object.`)\n      }\n    }\n\n    super(body, {\n      status: init.status ?? response.status,\n      statusText: init.statusText ?? response.statusText,\n      headers\n    })\n\n    this.meta = (init as ResInit).meta ?? response.meta\n    this.timeout = (init as ResInit).timeout ?? response.timeout\n    this.responseType = (init as ResInit).responseType ?? response.responseType\n    this.throwHttpError = (init as ResInit).throwHttpError ?? response.throwHttpError\n    this.abortController = (init as ResInit)[ABORT_CONTROLLER] ?? response.abortController\n    this.onDownloadProgress = (init as ResInit).onDownloadProgress ?? response.onDownloadProgress\n    this[ON_GLOBAL_DOWNLOAD_PROGRESS] =\n      (init as ResInit)[ON_GLOBAL_DOWNLOAD_PROGRESS] ?? response[ON_GLOBAL_DOWNLOAD_PROGRESS]\n  }\n}\n","import { Middleware, ProgressCallback } from '../types'\nimport { ON_GLOBAL_DOWNLOAD_PROGRESS } from '../constants'\nimport Res from '../Res'\n\nconst createReadableStream = (response: Response, onDownloadProgress: ProgressCallback) =>\n  new ReadableStream({\n    async start(controller) {\n      /**\n       * When http compression is used (common for big downloads)\n       * The content-length is the size after the http compression\n       * While the byteLength is the size after the file has been extracted.\n       */\n      const total = +response.headers.get('content-length')! || 0\n\n      /**\n       * node-fetch does not support the getReader\n       * so OnResponseProgress will not work\n       */\n      if (!response.body?.getReader) {\n        return controller.close()\n      }\n      const reader = response.body.getReader()\n\n      let carry = 0\n\n      onDownloadProgress(\n        {\n          ratio: 0, // Current Transfer Ratio\n          carry: 0, // Current Transfer Byte Size\n          total: 0 // Total size of transmitted bytes\n        },\n        new Uint8Array() // The chunk argument is an instance of Uint8Array.\n      )\n      const read = async () => {\n        const { done, value } = await reader.read()\n        if (done) return controller.close()\n\n        carry += value.byteLength\n\n        onDownloadProgress(\n          {\n            ratio: (carry / total) * 100,\n            carry,\n            total\n          },\n          value\n        )\n        controller.enqueue(value)\n        await read()\n      }\n      await read()\n    }\n  })\n\n/**\n * The first middleware through which the response passes, initializing the Res\n */\nconst responseHandler: Middleware = (next) => async (req) => {\n  // Here is the native Response\n  const response: Response = await next(req)\n\n  if (req.throwHttpError && !response.ok) {\n    throw new Error(`${response.status} ${response.statusText}`)\n  }\n\n  createReadableStream(response.clone(), (...args) => {\n    req.onDownloadProgress?.(...args)\n    req[ON_GLOBAL_DOWNLOAD_PROGRESS]?.(...args)\n  })\n\n  /**\n   * TODO: When timeout middleware can use AbortSignal.reason to throw error to cancel comments\n   * Close stream when requesting cancel\n   * References：https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason\n   */\n  //  const readableStream = createReadableStream(response.clone(), (...args) => {\n  //   response.onDownloadProgress?.(...args)\n  //   req[ON_GLOBAL_DOWNLOAD_PROGRESS]?.(...args)\n  // })\n  // req[ABORT_CONTROLLER].signal.addEventListener('abort', () => {\n  //   debugger\n  //   void readableStream.cancel()\n  // })\n\n  /**\n   * Filter out request.body (not iterable) by destructuring it\n   */\n  return new Res(response as Res, { ...req })\n}\n\nexport default responseHandler\n","import { Middleware } from '../types'\nimport { ABORT_CONTROLLER } from '../constants'\n\n/**\n * Network timeout\n * References：Why the default is 2147483647 milliseconds?\n * https://github.com/denysdovhan/wtfjs/issues/61\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n */\nconst timeoutHandler: Middleware = (next) => async (req) => {\n  return await new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      req[ABORT_CONTROLLER].abort()\n      reject(new Error(`Network timeout at: ${req.url}`))\n    }, req.timeout || 2147483647)\n\n    void next(req)\n      .then(resolve)\n      .catch(reject)\n      .then(() => clearTimeout(timer))\n  })\n\n  /**\n   * TODO: When all browsers have realize AbortSignal.reason cancel comments\n   * References：https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason\n   */\n  // const timer = setTimeout(\n  //   () => req[ABORT_CONTROLLER].abort(`Network timeout at: ${req.url}`),\n  //   req.timeout || 2147483647\n  // )\n  // try {\n  //   return await next(req)\n  // } finally {\n  //   clearTimeout(timer)\n  // }\n}\n\nexport default timeoutHandler\n","import { Middleware } from '../types'\n\nconst responseTypeHandler: Middleware = (next) => async (req) => {\n  const res = await next(req)\n  return req.responseType ? await res[req.responseType]() : res\n}\n\nexport default responseTypeHandler\n","/**\n * Merge Headers\n * @param target target.headers\n * @param source source.headers\n * @returns headers\n */\nconst mergeHeaders = (target: HeadersInit | Headers, source: HeadersInit | Headers) => {\n  const targetHeaders = Object.fromEntries(new Headers(target).entries())\n  const sourceHeaders = Object.fromEntries(new Headers(source).entries())\n  return new Headers({ ...targetHeaders, ...sourceHeaders })\n}\n\nexport default mergeHeaders\n","import { Options, Middleware } from './types'\nimport { ON_GLOBAL_DOWNLOAD_PROGRESS } from './constants'\nimport compose from './helpers/compose'\nimport requestHandler from './middleware/requestHandler'\nimport responseHandler from './middleware/responseHandler'\nimport timeoutHandler from './middleware/timeoutHandler'\nimport responseTypeHandler from './middleware/responseTypeHandler'\nimport mergeHeaders from './helpers/mergeHeaders'\nimport Req from './Req'\nimport Res from './Res'\n\nexport default class Resreq {\n  options: Options\n  middleware: Middleware[] = [responseTypeHandler, requestHandler, timeoutHandler, responseHandler]\n  constructor(options: Options = {}) {\n    this.options = {\n      ...options,\n      baseURL: options.baseURL || '',\n      timeout: options.timeout || 1000,\n      throwHttpError: options.throwHttpError || false\n    }\n  }\n\n  use(middleware: Middleware | Middleware[]) {\n    /**\n     * Users can modify request.timeout through middleware, so it must be placed last\n     * The response is first handled by the responseHandler，so it must be placed last\n     */\n    const responseHandler = this.middleware.pop()!\n    const timeoutHandler = this.middleware.pop()!\n    this.middleware = [...this.middleware, ...[middleware].flat(), timeoutHandler, responseHandler]\n    return this\n  }\n\n  async request<T = Res>(options: Options): Promise<T> {\n    const dispatch = compose(...this.middleware)\n    return dispatch(fetch as any as (req: Req) => Promise<Res>)({\n      ...this.options,\n      ...options,\n      headers: mergeHeaders(this.options.headers || {}, options?.headers || {}),\n      onDownloadProgress: options.onDownloadProgress,\n      [ON_GLOBAL_DOWNLOAD_PROGRESS]: this.options.onDownloadProgress\n    } as unknown as Req) as unknown as T\n  }\n\n  async get<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'GET' })\n  }\n\n  async post<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'POST' })\n  }\n\n  async put<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'PUT' })\n  }\n\n  async delete<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'DELETE' })\n  }\n\n  async patch<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'PATCH' })\n  }\n\n  async head<T = Res>(url: string, options?: Options): Promise<T> {\n    return await this.request({ ...options, url, method: 'HEAD' })\n  }\n}\n\nexport * from './types'\nexport { default as Req } from './Req'\nexport { default as Res } from './Res'\nexport { default as mergeHeaders } from './helpers/mergeHeaders'\n"],"mappings":";AAAO,IAAM,8BAA8B,OAAO,6BAA6B;AACxE,IAAM,mBAAmB,OAAO,kBAAkB;;;ACWzD,IAAM,UAAU,IAAwB,UAA8B;AACpE,MAAI,MAAM,WAAW,GAAG;AAEtB,WAAO,CAAI,QAAW;AAAA,EACxB;AAEA,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,MAAM;AAAA,EACf;AAEA,SAAO,MAAM;AAAA,IACX,CAAC,GAAG,MACF,IAAI,SACF,EAAE,EAAE,GAAG,IAAI,CAAC;AAAA,EAClB;AACF;AAEA,IAAO,kBAAQ;;;AC7Bf,IAAM,aAAa,CAAC,SAAgD;AAMlE,SACE,QACA,OAAO,SAAS,YAChB,EACG,WAAW,YAAY,gBAAgB,YACvC,WAAW,QAAQ,gBAAgB,QACnC,WAAW,QAAQ,gBAAgB,QACnC,WAAW,eAAe,gBAAgB,eAC1C,WAAW,eAAe,YAAY,OAAO,IAAI,KACjD,WAAW,mBAAmB,gBAAgB,mBAC9C,WAAW,kBAAkB,gBAAgB;AAGpD;AAEA,IAAO,qBAAQ;;;;;;AChBf,IAAqB,MAArB,cAAiC,QAAQ;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT,CAAU;AAAA,EACD;AAAA,EACT,CAAU;AAAA,EAEV,YAAY,SAAc,MAAyB;AACjD,QAAI,OAAQ,KAAK,QAAQ,QAAQ;AACjC,UAAM,UAAU,IAAI,QAAQ,KAAK,WAAW,QAAQ,OAAO;AAO3D,KAAC,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAI,cAAc,UAAU,SAAS;AAM3E,QAAI,QAAQ,mBAAW,IAAI,GAAG;AAC5B,cAAQ,IAAI,gBAAgB,kBAAkB;AAC9C,UAAI;AACF,eAAO,KAAK,UAAU,IAAI;AAAA,MAC5B,SAAS,OAAP;AACA,cAAM,IAAI,UAAU,2CAA2C;AAAA,MACjE;AAAA,IACF;AAWA,QAAK,WAAW,YAAY,gBAAgB,YAAa,gBAAgB,iBAAiB;AACxF,cAAQ,OAAO,cAAc;AAAA,IAC/B;AAEA,UAAM,kBAAkB,IAAI,gBAAgB;AAO5C,UAAM,SAAS,KAAK,UAAU,QAAQ,UAAU,gBAAgB;AAKhE,UAAM,IAAI,QAAQ,KAAK,OAAO,QAAQ,GAAG,GAAG;AAAA,MAC1C,QAAQ,KAAK,UAAU,QAAQ;AAAA,MAC/B;AAAA,MACA,MAAM,QAAQ,QAAQ;AAAA,MACtB,MAAM,KAAK,QAAQ,QAAQ;AAAA,MAK3B,aAAa,KAAK,eAAe,QAAQ;AAAA,MACzC,OAAO,KAAK,SAAS,QAAQ;AAAA,MAC7B,UAAU,KAAK,YAAY,QAAQ;AAAA,MACnC,UAAU,KAAK,YAAY,QAAQ;AAAA,MACnC,gBAAgB,KAAK,kBAAkB,QAAQ;AAAA,MAC/C,WAAW,KAAK,aAAa,QAAQ;AAAA,MACrC,WAAW,KAAK,aAAa,QAAQ;AAAA,MACrC,QAAQ,gBAAgB;AAAA,IAC1B,CAAC;AACD,SAAK,OAAQ,KAAiB,QAAQ,QAAQ;AAC9C,SAAK,UAAW,KAAiB,WAAW,QAAQ;AACpD,SAAK,eAAgB,KAAiB,gBAAgB,QAAQ;AAC9D,SAAK,iBAAkB,KAAiB,kBAAkB,QAAQ;AAClE,SAAK,qBAAsB,KAAiB,sBAAsB,QAAQ;AAC1E,SAAK,+BACF,KAAiB,gCAAgC,QAAQ;AAC5D,SAAK,oBAAoB;AACzB,WAAO,iBAAiB,SAAS,MAAM,gBAAgB,MAAM,CAAC;AAAA,EAChE;AACF;;;AChFA,IAAM,iBAA6B,CAAC,SAAS,OAAO,SAAS;AAK3D,QAAM,MAAM;AAEZ,QAAM,MAAM,OAAO,QAAQ,IAAI,UAAU,CAAC,CAAC,EACxC;AAAA,IACC,CAAC,KAAU,CAAC,KAAK,KAAK,MAAM;AAC1B,UAAI,aAAa,OAAO,KAAK,KAAK;AAClC,aAAO;AAAA,IACT;AAAA,IACA,IAAI,UAAU,IAAI,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,IAAI,IAAI,IAAI,GAAG;AAAA,EAC/D,EACC,SAAS;AAKZ,SAAO,MAAM,KAAK,IAAI,IAAI,KAAY,EAAE,IAAI,CAAC,CAAC;AAChD;AAEA,IAAO,yBAAQ;;;AC9Bf,IAAqB,MAArB,cAAiC,SAAS;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT,CAAU;AAAA,EAEV,YAAY,UAAe,MAA0B;AACnD,QAAI,OAAQ,KAAK,QAAQ,SAAS;AAClC,UAAM,UAAU,IAAI,QAAQ,KAAK,WAAW,SAAS,OAAO;AAI5D,QAAI,QAAQ,mBAAW,IAAI,GAAG;AAC5B,UAAI;AACF,eAAO,KAAK,UAAU,IAAI;AAAA,MAC5B,SAAS,OAAP;AACA,cAAM,IAAI,UAAU,4CAA4C;AAAA,MAClE;AAAA,IACF;AAEA,UAAM,MAAM;AAAA,MACV,QAAQ,KAAK,UAAU,SAAS;AAAA,MAChC,YAAY,KAAK,cAAc,SAAS;AAAA,MACxC;AAAA,IACF,CAAC;AAED,SAAK,OAAQ,KAAiB,QAAQ,SAAS;AAC/C,SAAK,UAAW,KAAiB,WAAW,SAAS;AACrD,SAAK,eAAgB,KAAiB,gBAAgB,SAAS;AAC/D,SAAK,iBAAkB,KAAiB,kBAAkB,SAAS;AACnE,SAAK,kBAAmB,KAAiB,qBAAqB,SAAS;AACvE,SAAK,qBAAsB,KAAiB,sBAAsB,SAAS;AAC3E,SAAK,+BACF,KAAiB,gCAAgC,SAAS;AAAA,EAC/D;AACF;;;ACtCA,IAAM,uBAAuB,CAAC,UAAoB,uBAChD,IAAI,eAAe;AAAA,EACjB,MAAM,MAAM,YAAY;AAMtB,UAAM,QAAQ,CAAC,SAAS,QAAQ,IAAI,gBAAgB,KAAM;AAM1D,QAAI,CAAC,SAAS,MAAM,WAAW;AAC7B,aAAO,WAAW,MAAM;AAAA,IAC1B;AACA,UAAM,SAAS,SAAS,KAAK,UAAU;AAEvC,QAAI,QAAQ;AAEZ;AAAA,MACE;AAAA,QACE,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,MACT;AAAA,MACA,IAAI,WAAW;AAAA,IACjB;AACA,UAAM,OAAO,YAAY;AACvB,YAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,UAAI;AAAM,eAAO,WAAW,MAAM;AAElC,eAAS,MAAM;AAEf;AAAA,QACE;AAAA,UACE,OAAQ,QAAQ,QAAS;AAAA,UACzB;AAAA,UACA;AAAA,QACF;AAAA,QACA;AAAA,MACF;AACA,iBAAW,QAAQ,KAAK;AACxB,YAAM,KAAK;AAAA,IACb;AACA,UAAM,KAAK;AAAA,EACb;AACF,CAAC;AAKH,IAAM,kBAA8B,CAAC,SAAS,OAAO,QAAQ;AAE3D,QAAM,WAAqB,MAAM,KAAK,GAAG;AAEzC,MAAI,IAAI,kBAAkB,CAAC,SAAS,IAAI;AACtC,UAAM,IAAI,MAAM,GAAG,SAAS,UAAU,SAAS,YAAY;AAAA,EAC7D;AAEA,uBAAqB,SAAS,MAAM,GAAG,IAAI,SAAS;AAClD,QAAI,qBAAqB,GAAG,IAAI;AAChC,QAAI,+BAA+B,GAAG,IAAI;AAAA,EAC5C,CAAC;AAmBD,SAAO,IAAI,IAAI,UAAiB,EAAE,GAAG,IAAI,CAAC;AAC5C;AAEA,IAAO,0BAAQ;;;ACjFf,IAAM,iBAA6B,CAAC,SAAS,OAAO,QAAQ;AAC1D,SAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,UAAM,QAAQ,WAAW,MAAM;AAC7B,UAAI,kBAAkB,MAAM;AAC5B,aAAO,IAAI,MAAM,uBAAuB,IAAI,KAAK,CAAC;AAAA,IACpD,GAAG,IAAI,WAAW,UAAU;AAE5B,SAAK,KAAK,GAAG,EACV,KAAK,OAAO,EACZ,MAAM,MAAM,EACZ,KAAK,MAAM,aAAa,KAAK,CAAC;AAAA,EACnC,CAAC;AAeH;AAEA,IAAO,yBAAQ;;;ACnCf,IAAM,sBAAkC,CAAC,SAAS,OAAO,QAAQ;AAC/D,QAAM,MAAM,MAAM,KAAK,GAAG;AAC1B,SAAO,IAAI,eAAe,MAAM,IAAI,IAAI,cAAc,IAAI;AAC5D;AAEA,IAAO,8BAAQ;;;ACDf,IAAM,eAAe,CAAC,QAA+B,WAAkC;AACrF,QAAM,gBAAgB,OAAO,YAAY,IAAI,QAAQ,MAAM,EAAE,QAAQ,CAAC;AACtE,QAAM,gBAAgB,OAAO,YAAY,IAAI,QAAQ,MAAM,EAAE,QAAQ,CAAC;AACtE,SAAO,IAAI,QAAQ,EAAE,GAAG,eAAe,GAAG,cAAc,CAAC;AAC3D;AAEA,IAAO,uBAAQ;;;ACDf,IAAqB,SAArB,MAA4B;AAAA,EAC1B;AAAA,EACA,aAA2B,CAAC,6BAAqB,wBAAgB,wBAAgB,uBAAe;AAAA,EAChG,YAAY,UAAmB,CAAC,GAAG;AACjC,SAAK,UAAU;AAAA,MACb,GAAG;AAAA,MACH,SAAS,QAAQ,WAAW;AAAA,MAC5B,SAAS,QAAQ,WAAW;AAAA,MAC5B,gBAAgB,QAAQ,kBAAkB;AAAA,IAC5C;AAAA,EACF;AAAA,EAEA,IAAI,YAAuC;AAKzC,UAAMA,mBAAkB,KAAK,WAAW,IAAI;AAC5C,UAAMC,kBAAiB,KAAK,WAAW,IAAI;AAC3C,SAAK,aAAa,CAAC,GAAG,KAAK,YAAY,GAAG,CAAC,UAAU,EAAE,KAAK,GAAGA,iBAAgBD,gBAAe;AAC9F,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAiB,SAA8B;AACnD,UAAM,WAAW,gBAAQ,GAAG,KAAK,UAAU;AAC3C,WAAO,SAAS,KAA0C,EAAE;AAAA,MAC1D,GAAG,KAAK;AAAA,MACR,GAAG;AAAA,MACH,SAAS,qBAAa,KAAK,QAAQ,WAAW,CAAC,GAAG,SAAS,WAAW,CAAC,CAAC;AAAA,MACxE,oBAAoB,QAAQ;AAAA,MAC5B,CAAC,8BAA8B,KAAK,QAAQ;AAAA,IAC9C,CAAmB;AAAA,EACrB;AAAA,EAEA,MAAM,IAAa,KAAa,SAA+B;AAC7D,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,MAAM,CAAC;AAAA,EAC9D;AAAA,EAEA,MAAM,KAAc,KAAa,SAA+B;AAC9D,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,OAAO,CAAC;AAAA,EAC/D;AAAA,EAEA,MAAM,IAAa,KAAa,SAA+B;AAC7D,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,MAAM,CAAC;AAAA,EAC9D;AAAA,EAEA,MAAM,OAAgB,KAAa,SAA+B;AAChE,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,SAAS,CAAC;AAAA,EACjE;AAAA,EAEA,MAAM,MAAe,KAAa,SAA+B;AAC/D,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,QAAQ,CAAC;AAAA,EAChE;AAAA,EAEA,MAAM,KAAc,KAAa,SAA+B;AAC9D,WAAO,MAAM,KAAK,QAAQ,EAAE,GAAG,SAAS,KAAK,QAAQ,OAAO,CAAC;AAAA,EAC/D;AACF;","names":["responseHandler","timeoutHandler"]}